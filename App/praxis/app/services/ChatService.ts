// src/services/ChatService.ts

import * as DatabaseService from './DatabaseService';
import { AIBridge } from './AIBridge';
import { Message, ChatSession } from './DatabaseService';

// --- Public API for the store/UI ---

/** Retrieves all chat sessions from the database. */
export const getAllSessions = (): Promise<ChatSession[]> => {
  return DatabaseService.getAllSessions();
};

/** Creates a new session in the database. */
export const createNewSession = (title: string): Promise<ChatSession> => {
  return DatabaseService.createNewSession(title);
};

/** Retrieves all messages for a specific session. */
export const getMessagesForSession = (sessionId: string): Promise<Message[]> => {
  return DatabaseService.getMessagesForSession(sessionId);
};

/**
 * Creates a user message object without saving it. Used for optimistic UI updates.
 * @param sessionId The current session ID.
 * @param content The text content from the user.
 * @returns A Message object representing the user's input.
 */
export const createUserMessage = (sessionId: string, content: string): Message => {
  // Note: This ID is temporary for the UI. The real one is generated by the DB.
  return {
    id: `temp-${Date.now()}`,
    session_id: sessionId,
    role: 'user',
    content,
    timestamp: Date.now(),
  };
};

/**
 * Processes a user's message, gets an AI response, and saves both.
 * @param userMessage The user's message object.
 * @returns A promise that resolves to the assistant's final message object.
 */
export const processUserMessage = async (userMessage: Message): Promise<Message> => {
  // 1. Save the user's message to the database
  await DatabaseService.addMessage(userMessage);

  // 2. Get conversation history for context
  const history = await DatabaseService.getMessagesForSession(userMessage.session_id);

  // 3. TODO: Perform RAG search
  // const ragChunks = await AIBridge.performRAGSearch(userMessage.content);

  // 4. TODO: Construct the full prompt with RAG, device context, etc.
  const fullPrompt = userMessage.content;

  // 5. Get a response from the AI
  const aiResponseContent = await AIBridge.generateResponse(fullPrompt, history);

  // 6. Save the assistant's response to the database
  const assistantMessageData: Omit<Message, 'id'> = {
    session_id: userMessage.session_id,
    role: 'assistant',
    content: aiResponseContent,
    timestamp: Date.now(),
  };
  const finalAssistantMessage = await DatabaseService.addMessage(assistantMessageData);

  // 7. TODO: Log the full event
  // await DatabaseService.logEvent(...);

  return finalAssistantMessage;
};
